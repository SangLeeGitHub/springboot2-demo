{"version":3,"sources":["Hello.js","App.js","serviceWorker.js","index.js"],"names":["Hello","state","name","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","props","onHello","alert","react_default","a","createElement","onSubmit","this","style","text-align","type","placeholder","onChange","Component","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","id","content","handleHello","bind","assertThisInitialized","data","_this2","fetch","then","res","json","n","Hello_Hello","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRAEqBA,6MACjBC,MAAQ,CACJC,KAAM,MAGVC,aAAe,SAACC,GAEZC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKH,EAAEK,OAAOP,KAAQE,EAAEK,OAAOC,WAInCC,aAAe,SAACP,GAEZA,EAAEQ,iBAEsB,KAApBP,EAAKJ,MAAMC,MAMfG,EAAKQ,MAAMC,QAAQT,EAAKJ,OAExBI,EAAKC,SAAS,CACVJ,KAAM,MAPNa,MAAM,qGAcV,OACIC,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKT,aAAcU,MAHvB,CAACC,aAAc,WAIvBN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACIK,KAAK,OACLrB,KAAK,OACLsB,YAAY,eACZd,MAAOU,KAAKnB,MAAMC,KAClBuB,SAAUL,KAAKjB,eAEnBa,EAAAC,EAAAC,cAAA,UAAQK,KAAK,UAAb,sBA1CeG,aCyCpBC,cArCb,SAAAA,EAAYd,GAAO,IAAAR,EAAA,OAAAE,OAAAqB,EAAA,EAAArB,CAAAa,KAAAO,IAEjBtB,EAAAE,OAAAsB,EAAA,EAAAtB,CAAAa,KAAAb,OAAAuB,EAAA,EAAAvB,CAAAoB,GAAAI,KAAAX,KAAMP,KAKRZ,MAAQ,CACN+B,GAAI,EACJC,QAAS,IALT5B,EAAK6B,YAAc7B,EAAK6B,YAAYC,KAAjB5B,OAAA6B,EAAA,EAAA7B,CAAAF,IAJFA,2EAYPgC,GAAM,IAAAC,EAAAlB,KAEhBmB,MAAM,kBAAoBF,EAAKnC,MAC5BsC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACLL,EAAKhC,SAAS,CACZ0B,GAAIW,EAAEX,GACNC,QAASU,EAAEV,6CAQjB,OACIjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAD,CAAO9B,QAASM,KAAKc,cAEpBd,KAAKnB,MAAM+B,GAHd,KAGoBZ,KAAKnB,MAAMgC,gBAjCrBP,aCQEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC","file":"static/js/main.ea8cd2a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Hello extends Component {\n    state = {\n        name: ''\n    }\n\n    handleChange = (e) => {\n\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n    };\n\n    handleSubmit = (e) => {\n        // 현재 페이지 표시 중에 다시 진입 방지\n        e.preventDefault();\n        // 빈입력 방지\n        if (this.state.name === '') \n        {\n            alert(\"Empty value not allowed.\");\n            return;\n        }\n        // state 를 onHello 를 통하여 부모에게 전달\n        this.props.onHello(this.state);\n        // 초기화\n        this.setState({\n            name: ''\n        })\n    };\n\n    render() {\n        var formStyle = {'text-align': 'center'}\n        // Submit 클릭시 Line 15 의 Method 호출 \n        return (\n            <form onSubmit={this.handleSubmit} style={formStyle}>\n                <div>\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        placeholder=\"이름\"\n                        value={this.state.name}\n                        onChange={this.handleChange}\n                    />\n                    <button type=\"submit\">Say Hello</button>\n                </div>\n            </form>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Hello from './Hello.js'\n\nclass App extends Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.handleHello = this.handleHello.bind(this);\n  }\n\n  state = {\n    id: 0,\n    content: \"\"\n  }\n\n  handleHello(data) {\n\n    fetch('/greeting?name=' + data.name)\n      .then(res => res.json())\n      .then((n) => {\n        this.setState({\n          id: n.id,\n          content: n.content\n        });\n      })\n  }\n\n  render() \n  {\n    var divStyle = {'text-align': 'center'}\n    return (\n        <div>\n          <Hello onHello={this.handleHello}\n          />\n          {this.state.id}, {this.state.content}\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}